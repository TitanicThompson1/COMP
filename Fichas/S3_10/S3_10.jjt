options {
    LOOKAHEAD = 3;
}

PARSER_BEGIN(S3_10)


// Java code invoking the parser
public class S3_10 {
    public static void main(String[] args) throws ParseException {
        System.out.println("Write an arithmetic expression:");
        S3_10 parser = new S3_10(System.in);
        SimpleNode root = parser.Expression(); // returns reference to root node

        root.dump(""); // prints the tree on the screen

    }


}

PARSER_END(S3_10)
// Symbols that must be skipped during the lexical analysis
SKIP :
{
" " | "\t" | "\r" | "\n"
}

// token definition (terminal symbols)
TOKEN :
{
    < INT: "int" > |
    < IDENT: ["a"-"z"]["0"-"9", "a"-"z"]> |
    < VIRG: ","> |
    < PVIRG: ";"> |
    < CONST : (["0" - "9"])+ > |
    < IGUAL: "="> |
    < MULT : "*">
}

SimpleNode Expression(): {}
{
    (Decl())*
    (AttriConst())*
    (AttriExpr())*
}

void Decl(): {}
{
    <INT> {System.out.println("helo");}<IDENT> (<VIRG> <IDENT>)* <PVIRG>
}

void AttriConst(): {}
{
    <IDENT> <IGUAL> <CONST> <PVIRG>
}

void AttriExpr(): {}
{
    <IDENT> <IGUAL> Expr() <PVIRG>
}

void Expr(): {}
{
    <IDENT> <MULT> <IDENT>
}

